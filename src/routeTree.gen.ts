/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as SpacesRouteImport } from './routes/spaces/route'
import { Route as SpaceRouteImport } from './routes/space/route'
import { Route as IndexImport } from './routes/index'
import { Route as SpaceSlugImport } from './routes/space/$slug'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const SpacesRouteRoute = SpacesRouteImport.update({
  id: '/spaces',
  path: '/spaces',
  getParentRoute: () => rootRoute,
} as any)

const SpaceRouteRoute = SpaceRouteImport.update({
  id: '/space',
  path: '/space',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SpaceSlugRoute = SpaceSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => SpaceRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/space': {
      id: '/space'
      path: '/space'
      fullPath: '/space'
      preLoaderRoute: typeof SpaceRouteImport
      parentRoute: typeof rootRoute
    }
    '/spaces': {
      id: '/spaces'
      path: '/spaces'
      fullPath: '/spaces'
      preLoaderRoute: typeof SpacesRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/space/$slug': {
      id: '/space/$slug'
      path: '/$slug'
      fullPath: '/space/$slug'
      preLoaderRoute: typeof SpaceSlugImport
      parentRoute: typeof SpaceRouteImport
    }
  }
}

// Create and export the route tree

interface SpaceRouteRouteChildren {
  SpaceSlugRoute: typeof SpaceSlugRoute
}

const SpaceRouteRouteChildren: SpaceRouteRouteChildren = {
  SpaceSlugRoute: SpaceSlugRoute,
}

const SpaceRouteRouteWithChildren = SpaceRouteRoute._addFileChildren(
  SpaceRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/space': typeof SpaceRouteRouteWithChildren
  '/spaces': typeof SpacesRouteRoute
  '/login': typeof LoginRoute
  '/space/$slug': typeof SpaceSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/space': typeof SpaceRouteRouteWithChildren
  '/spaces': typeof SpacesRouteRoute
  '/login': typeof LoginRoute
  '/space/$slug': typeof SpaceSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/space': typeof SpaceRouteRouteWithChildren
  '/spaces': typeof SpacesRouteRoute
  '/login': typeof LoginRoute
  '/space/$slug': typeof SpaceSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/space' | '/spaces' | '/login' | '/space/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/space' | '/spaces' | '/login' | '/space/$slug'
  id: '__root__' | '/' | '/space' | '/spaces' | '/login' | '/space/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SpaceRouteRoute: typeof SpaceRouteRouteWithChildren
  SpacesRouteRoute: typeof SpacesRouteRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SpaceRouteRoute: SpaceRouteRouteWithChildren,
  SpacesRouteRoute: SpacesRouteRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/space",
        "/spaces",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/space": {
      "filePath": "space/route.tsx",
      "children": [
        "/space/$slug"
      ]
    },
    "/spaces": {
      "filePath": "spaces/route.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/space/$slug": {
      "filePath": "space/$slug.tsx",
      "parent": "/space"
    }
  }
}
ROUTE_MANIFEST_END */
